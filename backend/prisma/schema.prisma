// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  name String
  email String @unique
  password String
  role Role
  projects Project[] @relation("ManagerProjects")
  tasks Task[]
  comments Comment[]
  notifications Notification[]
  teamProjects Project[] @relation("TeamMembersProjects")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id Int @id @default(autoincrement())
  title String
  description String
  status ProjectStatus
  start_date DateTime
  due_date DateTime
  priority Priority
  manager_id Int
  manager User @relation("ManagerProjects", fields: [manager_id], references: [id])
  teamMembers User[] @relation("TeamMembersProjects")
  tasks Task[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id Int @id @default(autoincrement())
  title String
  description String
  status TaskStatus
  start_date DateTime
  due_date DateTime
  project_id Int
  project Project @relation(fields: [project_id], references: [id])
  assignee_id Int
  comments Comment[]
  priority Priority
  assignee User @relation(fields: [assignee_id], references: [id])
  title_is_updating Boolean @default(false)
  description_is_updating Boolean @default(false)
  status_is_updating Boolean @default(false)
  due_date_is_updating Boolean @default(false)
  assignee_is_updating Boolean @default(false)
  title_lockTimestamp DateTime?
  description_lockTimestamp DateTime?
  status_lockTimestamp DateTime?
  due_date_lockTimestamp DateTime?
  assignee_lockTimestamp DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model Comment {
  id Int @id @default(autoincrement())
  content String
  createdAt DateTime @default(now())
  task_id Int
  user_id Int
  task Task @relation(fields: [task_id], references: [id])
  user User @relation(fields: [user_id], references: [id])

}

model Notification {
  id Int @id @default(autoincrement())
  content String
  type NotificationType
  user_id Int
  user User @relation(fields: [user_id], references: [id])
  task_id Int?
  comment_id Int?
  isRead Boolean @default(false)
  createdAt DateTime @default(now())
}


enum Role {
  PM // Project Manager
  TM // Team Member
}

enum ProjectStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  ON_HOLD
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum NotificationType {
  TASK_EDIT
  COMMENT
}
